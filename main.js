(()=>{"use strict";var t={904:(t,n,e)=>{e.d(n,{c:()=>a});var r=e(648),i=e.n(r),o=e(312),s=e.n(o)()(i());s.push([t.id,"* {}\n\nbody {\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n.info-container {\n    position: fixed;\n    top: 0;\n    right: 10%;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n.p1-container,\n.p2-container {\n    margin-top: 100px;\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.p1-cell,\n.p2-cell {\n    border: 2px solid gray;\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: aqua;\n}\n\n/* .hidden-ship {\n    background-color: yellow;\n} */\n\n.hit-ship {\n    background-color: red;\n}\n\n.hit-missed {\n    background-color: rgb(138, 235, 82);\n}\n\n.display-wrap > * {\n    margin-left: 50%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,GAAG;;AAEH;IACI,sBAAsB;IACtB,4BAA4B;AAChC;;AAEA;IACI,eAAe;IACf,MAAM;IACN,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;;IAEI,iBAAiB;IACjB,aAAa;IACb,eAAe;IACf,YAAY;AAChB;;AAEA;;IAEI,sBAAsB;IACtB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;;GAEG;;AAEH;IACI,qBAAqB;AACzB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:["* {}\n\nbody {\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n.info-container {\n    position: fixed;\n    top: 0;\n    right: 10%;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n.p1-container,\n.p2-container {\n    margin-top: 100px;\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.p1-cell,\n.p2-cell {\n    border: 2px solid gray;\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: aqua;\n}\n\n/* .hidden-ship {\n    background-color: yellow;\n} */\n\n.hit-ship {\n    background-color: red;\n}\n\n.hit-missed {\n    background-color: rgb(138, 235, 82);\n}\n\n.display-wrap > * {\n    margin-left: 50%;\n}"],sourceRoot:""}]);const a=s},312:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);r&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),n.push(d))}},n}},648:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},596:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var p=e(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var f=i(h,r);r.byIndex=a,n.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function i(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=e(o[s]);n[a].references--}for(var c=r(t,i),l=0;l<o.length;l++){var d=e(o[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},176:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},808:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},120:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},520:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},936:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return t[r](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(596),n=e.n(t),r=e(520),i=e.n(r),o=e(176),s=e.n(o),a=e(120),c=e.n(a),l=e(808),d=e.n(l),u=e(936),p=e.n(u),h=e(904),f={};function A(t,n){return Math.floor(Math.random()*(n-t+1)+t)}function v(t){const n=A(0,9),e=A(0,9),r=function(t,n){for(let e=0;e<t.length;e++)if(n[0]===t[e][0]&&t[e][1]===n[1])return e}(t.board,[n,e]);return null===t.objList[r].attacked?[n,e]:v(t)}f.styleTagTransform=p(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),n()(h.c,f),h.c&&h.c.locals&&h.c.locals;const m=t=>({sendAttack:n=>{if(n)t.receiveAttack(n);else{const n=v(t);t.receiveAttack(n)}},activeTurn:!1}),b=(t,n,e)=>{const r=e.objList;return{displayGrid:n=>{for(let e=0;e<100;e++){const r=document.createElement("div"),i=n?"p2-cell":"p1-cell";r.classList.add(i);const o=Math.floor(e/10),s=e%10;r.dataset.row=o,r.dataset.col=s,t.appendChild(r)}},refreshGrid:e=>{const i=e?".p1-cell":".p2-cell";t.querySelectorAll(i).forEach(((t,i)=>{const o=r[i],s=e?"ship":"hidden-ship";null!==o.ship&&null===o.attacked?t.classList.add(s):null!==o.ship&&!0===o.attacked?t.classList.add("hit-ship"):null===o.ship&&!0===o.attacked&&t.classList.add("hit-missed"),!1===n.activeTurn?(t.classList.remove("inActive"),t.classList.add("active")):(t.classList.add("inActive"),t.classList.remove("active"))}))}}};class y{constructor(t){this.length=t,this.hitsCount=0}hits(){return this.hitsCount++}isSunk(){return this.hitsCount>=this.length}}class g{constructor(){this.size=10,this.board=this.createBoard(),this.objList=this.buildObjList(this.board)}receiveAttack(t){const n=[t[0],t[1]],e=this.findIndex(this.board,n);null!=this.objList[e].ship?(this.objList[e].ship.hits(),this.objList[e].attacked=!0):this.objList[e].attacked=!0}createBoard(){const t=[];for(let n=0;n<this.size;n++)for(let e=0;e<this.size;e++)t.push([n,e]);return t}buildObjList(t){const n=[];for(let e=0;e<t.length;e++)n[e]={ship:null,attacked:null};return n}placeShip(t,n,e){const r=new y(n);let[i,o]=t;if("x"===e?o+=n-1:i+=n-1,!(i>=this.size||o>=this.size))for(let n=t[0];n<=i;n++)for(let e=t[1];e<=o;e++){let t=this.findIndex(this.board,[n,e]);this.objList[t].ship=r}}hasShip(t){const n=[t[0],t[1]],e=this.findIndex(this.board,n);return null!=this.objList[e].ship}allShipSunk(){for(let t=0;t<this.objList.length;t++)if(this.objList[t].ship&&!this.objList[t].ship.isSunk())return!1;return!0}findIndex(t,n){for(let e=0;e<t.length;e++)if(n[0]===t[e][0]&&t[e][1]===n[1])return e}placeRandomShip(){const t=[{length:5,quantity:1},{length:4,quantity:1},{length:3,quantity:2},{length:2,quantity:1}];for(const n of t)for(let t=0;t<n.quantity;t++){let t,e,r=!1;for(;!r;)if(t=[Math.floor(Math.random()*this.size),Math.floor(Math.random()*this.size)],e=Math.random()<.5?"x":"y","x"===e?t[1]+n.length-1<this.size&&(r=!0):t[0]+n.length-1<this.size&&(r=!0),r)for(let i=0;i<n.length;i++){let n="x"===e?t[0]:t[0]+i,o="x"===e?t[1]+i:t[1],s=this.findIndex(this.board,[n,o]);if(null!==this.objList[s].ship){r=!1;break}}r&&this.placeShip(t,n.length,e)}}}document.querySelector(".start").addEventListener("click",(()=>{document.querySelector(".info-container").remove(),C(),(()=>{const t=new g;t.placeRandomShip();const n=new g;n.placeRandomShip();const e=document.querySelector(".p1-container"),r=document.querySelector(".p2-container"),i=m(t),o=m(n),s=b(e,i,t),a=b(r,o,n);s.displayGrid(!1),a.displayGrid(!0),s.refreshGrid(!0),a.refreshGrid(!1),document.querySelectorAll(".p2-cell").forEach((e=>{e.addEventListener("click",(()=>{const r=parseInt(e.dataset.row),c=parseInt(e.dataset.col),l=document.querySelector(".display-msg");if(n.receiveAttack([r,c]),a.refreshGrid(!1),n.allShipSunk())return console.log("Player wins!"),void(l.textContent="Player Wins!");setTimeout((()=>{if(o.activeTurn=!0,i.sendAttack(),s.refreshGrid(!0),t.allShipSunk())return console.log("Bot wins!"),void(l.textContent="Computer Wins");o.activeTurn=!1}),1e3)}))}))})()}));const C=()=>{const t=document.querySelector("p1-container"),n=document.querySelector("p2-container");if(t)for(;t.firstChild;)t.removeChild(t.firstChild);if(n)for(;n.firstChild;)n.removeChild(n.firstChild)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,