(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"* {\n    \n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n.p1-container,\n.p2-container {\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.p1-cell,\n.p2-cell {\n    border: 2px solid gray;\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: aqua;\n}\n\n.hidden-ship {\n    background-color: yellow;\n}\n\n.hit-ship {\n    background-color: red;\n}\n\n.hit-missed {\n    background-color: rgb(138, 235, 82);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;AAEA;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;AACvB;AACA;;IAEI,aAAa;IACb,eAAe;IACf,YAAY;AAChB;;AAEA;;IAEI,sBAAsB;IACtB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,mCAAmC;AACvC",sourcesContent:["* {\n    \n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n.p1-container,\n.p2-container {\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.p1-cell,\n.p2-cell {\n    border: 2px solid gray;\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: aqua;\n}\n\n.hidden-ship {\n    background-color: yellow;\n}\n\n.hit-ship {\n    background-color: red;\n}\n\n.hit-missed {\n    background-color: rgb(138, 235, 82);\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);r&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var h=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=i(p,r);r.byIndex=a,e.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=r(t,i),l=0;l<o.length;l++){var d=n(o[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),i=n.n(r),o=n(569),s=n.n(o),a=n(565),c=n.n(a),l=n(216),d=n.n(l),u=n(589),h=n.n(u),p=n(426),f={};function A(t,e){return Math.floor(Math.random()*(e-t+1)+t)}function v(t){const e=A(0,9),n=A(0,9),r=function(t,e){for(let n=0;n<t.length;n++)if(e[0]===t[n][0]&&t[n][1]===e[1])return n}(t.board,[e,n]);return null===t.objList[r].attacked?[e,n]:v(t)}f.styleTagTransform=h(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const m=t=>({sendAttack:e=>{if(e)t.receiveAttack(e);else{const e=v(t);t.receiveAttack(e)}},activeTurn:!1}),b=(t,e,n)=>{const r=n.objList;return{displayGrid:e=>{for(let n=0;n<100;n++){const r=document.createElement("div"),i=e?"p2-cell":"p1-cell";r.classList.add(i);const o=Math.floor(n/10),s=n%10;r.dataset.row=o,r.dataset.col=s,t.appendChild(r)}},refreshGrid:n=>{const i=n?".p1-cell":".p2-cell";t.querySelectorAll(i).forEach(((t,i)=>{const o=r[i],s=n?"ship":"hidden-ship";null!==o.ship&&null===o.attacked?t.classList.add(s):null!==o.ship&&!0===o.attacked?t.classList.add("hit-ship"):null===o.ship&&!0===o.attacked&&t.classList.add("hit-missed"),!1===e.activeTurn?(t.classList.remove("inActive"),t.classList.add("active")):(t.classList.add("inActive"),t.classList.remove("active"))}))}}};class y{constructor(t){this.length=t,this.hitsCount=0}hits(){return this.hitsCount++}isSunk(){return this.hitsCount>=this.length}}class g{constructor(){this.size=10,this.board=this.createBoard(),this.objList=this.buildObjList(this.board)}receiveAttack(t){const e=[t[0],t[1]],n=this.findIndex(this.board,e);null!=this.objList[n].ship?(this.objList[n].ship.hits(),this.objList[n].attacked=!0):this.objList[n].attacked=!0}createBoard(){const t=[];for(let e=0;e<this.size;e++)for(let n=0;n<this.size;n++)t.push([e,n]);return t}buildObjList(t){const e=[];for(let n=0;n<t.length;n++)e[n]={ship:null,attacked:null};return e}placeShip(t,e,n){const r=new y(e);let[i,o]=t;if("x"===n?o+=e-1:i+=e-1,!(i>=this.size||o>=this.size))for(let e=t[0];e<=i;e++)for(let n=t[1];n<=o;n++){let t=this.findIndex(this.board,[e,n]);this.objList[t].ship=r}}hasShip(t){const e=[t[0],t[1]],n=this.findIndex(this.board,e);return null!=this.objList[n].ship}allShipSunk(){for(let t=0;t<this.objList.length;t++)if(this.objList[t].ship&&!this.objList[t].ship.isSunk())return!1;return!0}findIndex(t,e){for(let n=0;n<t.length;n++)if(e[0]===t[n][0]&&t[n][1]===e[1])return n}placeRandomShip(){const t=[{length:5,quantity:1},{length:4,quantity:1},{length:3,quantity:2},{length:2,quantity:1}];for(const e of t)for(let t=0;t<e.quantity;t++){let t,n,r=!1;for(;!r;)if(t=[Math.floor(Math.random()*this.size),Math.floor(Math.random()*this.size)],n=Math.random()<.5?"x":"y","x"===n?t[1]+e.length-1<this.size&&(r=!0):t[0]+e.length-1<this.size&&(r=!0),r)for(let i=0;i<e.length;i++){let e="x"===n?t[0]:t[0]+i,o="x"===n?t[1]+i:t[1],s=this.findIndex(this.board,[e,o]);if(null!==this.objList[s].ship){r=!1;break}}r&&this.placeShip(t,e.length,n)}}}document.querySelector(".start").addEventListener("click",(()=>{C(),(()=>{const t=new g;t.placeRandomShip();const e=new g;e.placeRandomShip();const n=document.querySelector(".p1-container"),r=document.querySelector(".p2-container"),i=m(t),o=m(e),s=b(n,i,t),a=b(r,o,e);s.displayGrid(!1),a.displayGrid(!0),s.refreshGrid(!0),a.refreshGrid(!1),document.querySelectorAll(".p2-cell").forEach((n=>{n.addEventListener("click",(()=>{const r=parseInt(n.dataset.row),c=parseInt(n.dataset.col);e.receiveAttack([r,c]),a.refreshGrid(!1),e.allShipSunk()?console.log("Player wins!"):setTimeout((()=>{o.activeTurn=!0,i.sendAttack(),s.refreshGrid(!0),t.allShipSunk()?console.log("Bot wins!"):o.activeTurn=!1}),1e3)}))}))})()}));const C=()=>{const t=document.querySelector("p1-container"),e=document.querySelector("p2-container");if(t)for(;t.firstChild;)t.removeChild(t.firstChild);if(e)for(;e.firstChild;)e.removeChild(e.firstChild)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,