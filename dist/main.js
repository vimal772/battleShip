(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([t.id,"* {\n    \n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n.p1-container,\n.p2-container {\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.cell {\n    border: 2px solid gray;\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: aqua;\n}\n\n.hidden-ship {\n    background-color: yellow;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;AAEA;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;AACvB;AACA;;IAEI,aAAa;IACb,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;AAC5B",sourcesContent:["* {\n    \n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n.p1-container,\n.p2-container {\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.cell {\n    border: 2px solid gray;\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: aqua;\n}\n\n.hidden-ship {\n    background-color: yellow;\n}"],sourceRoot:""}]);const a=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var s={},o=[],a=0;a<t.length;a++){var c=t[a],l=i.base?c[0]+i.base:c[0],d=s[l]||0,u="".concat(l," ").concat(d);s[l]=d+1;var h=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=r(p,i);i.byIndex=a,e.splice(a,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var s=i(t=t||[],r=r||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=n(s[o]);e[a].references--}for(var c=i(t,r),l=0;l<s.length;l++){var d=n(s[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}s=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var s=e[i]={id:i,exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),s=n(569),o=n.n(s),a=n(565),c=n.n(a),l=n(216),d=n.n(l),u=n(589),h=n.n(u),p=n(426),f={};function A(t){const e=(0,99,Math.floor(100*Math.random()+0));return null===t.objList[e].attacked?e:A(t)}f.styleTagTransform=h(),f.setAttributes=c(),f.insert=o().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const v=t=>({sendAttack:e=>{if(e)enemyGame.receuveAttack(e);else{const e=A(t);enemyGame.receuveAttack(e)}},activeTurn:!1}),m=(t,e,n)=>{const i=n.objList;return{displayGrid:()=>{for(let n=0;n<100;n++){const r=document.createElement("div");r.classList.add("cell"),null!=i[n].ship&&null===i[n].attacked?r.classList.add("ship"):null!=i[n].ship&&!0===i[n].attacked?r.classList.add("hit-ship"):null===i[n].skip&&!0===i[n].attacked&&r.classList.add("hit-missed"),!1===e.activeTurn?(r.classList.remove("inActive"),r.classList.add("active")):(r.classList.add("inActive"),r.classList.remove("active")),t.appendChild(r)}},refreshGrid:n=>{t.querySelectorAll(".cell").forEach(((t,r)=>{const s=i[r];t.className="cell";const o=n?"ship":"hidden-ship";null!==s.ship&&null===s.attacked?t.classList.add(o):null!==s.ship&&!0===s.attacked?t.classList.add("hit-ship"):null===s.ship&&!0===s.attacked&&t.classList.add("hit-missed"),!1===e.activeTurn?(t.classList.remove("inActive"),t.classList.add("active")):(t.classList.add("inActive"),t.classList.remove("active"))}))}}};class y{constructor(t){this.length=t,this.hitsCount=0}hits(){return this.hitsCount++}isSunk(){return this.hitsCount>=this.length}}class b{constructor(){this.size=10,this.board=this.createBoard(),this.objList=this.buildObjList(this.board)}receiveAttack(t){const e=[t[0],t[1]],n=this.findIndex(this.board,e);null!=this.objList[n].ship?(this.objList[n].ship.hits(),this.objList[n].attacked=!0):this.objList[n].attacked=!0}createBoard(){const t=[];for(let e=0;e<this.size;e++)for(let n=0;n<this.size;n++)t.push([e,n]);return t}buildObjList(t){const e=[];for(let n=0;n<t.length;n++)e[n]={ship:null,attacked:null};return e}placeShip(t,e,n){const i=new y(e);let[r,s]=t;if("x"===n?s+=e-1:r+=e-1,!(r>=this.size||s>=this.size))for(let e=t[0];e<=r;e++)for(let n=t[1];n<=s;n++){let t=this.findIndex(this.board,[e,n]);this.objList[t].ship=i}}hasShip(t){const e=[t[0],t[1]],n=this.findIndex(this.board,e);return null!=this.objList[n].ship}allShipSunk(){let t=!1;for(let e=0;e<this.objList.length;e++)this.objList[e].ship&&this.objList[e].ship.isSunk()&&(t=!0);return t}findIndex(t,e){for(let n=0;n<t.length;n++)if(e[0]===t[n][0]&&t[n][1]===e[1])return n}placeRandomShip(){const t=[{length:5,quantity:1},{length:4,quantity:1},{length:3,quantity:2},{length:2,quantity:1}];for(const e of t)for(let t=0;t<e.quantity;t++){let t,n,i=!1;for(;!i;)if(t=[Math.floor(Math.random()*this.size),Math.floor(Math.random()*this.size)],n=Math.random()<.5?"x":"y","x"===n?t[1]+e.length-1<this.size&&(i=!0):t[0]+e.length-1<this.size&&(i=!0),i)for(let r=0;r<e.length;r++){let e="x"===n?t[0]:t[0]+r,s="x"===n?t[1]+r:t[1],o=this.findIndex(this.board,[e,s]);if(null!==this.objList[o].ship){i=!1;break}}i&&this.placeShip(t,e.length,n)}}}document.querySelector(".start").addEventListener("click",(()=>{g(),(()=>{const t=new b;t.placeRandomShip();const e=new b;e.placeRandomShip(),console.log(t.objList);const n=document.querySelector(".p1-container"),i=document.querySelector(".p2-container"),r=v(t),s=v(e),o=m(n,r,t),a=m(i,s,e);for(o.displayGrid(),a.displayGrid(),o.refreshGrid(!0),a.refreshGrid(!1);!1!==t.allShipSunk()&&!1!==e.allShipSunk();)r.activeTurn=!0,r.sendAttack(),r.activeTurn=!1,s.activeTurn=!0,s.sendAttack(),s.activeTurn=!1;!0===t.allShipSunk()&&console.log("computer wins"),!0===e.allShipSunk()&&console.log("player wins")})()}));const g=()=>{const t=document.querySelector("p1-container"),e=document.querySelector("p2-container");if(t)for(;t.firstChild;)t.removeChild(t.firstChild);if(e)for(;e.firstChild;)e.removeChild(e.firstChild)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,