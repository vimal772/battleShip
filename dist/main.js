(()=>{"use strict";var e={904:(e,t,n)=>{n.d(t,{c:()=>u});var o=n(648),r=n.n(o),i=n(312),a=n.n(i),s=n(536),c=n.n(s),l=new URL(n(759),n.b),d=a()(r()),p=c()(l);d.push([e.id,`body {\n    background-image: url(${p});\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n.info-container {\n    position: fixed;\n    top: 0;\n    right: 10%;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n.p1-container,\n.p2-container {\n    margin-top: 20px;\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.p1-cell,\n.p2-cell {\n    border: 2px solid rgba(230, 220, 220, 0.6);\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: darkslategray\n}\n\n/* .hidden-ship {\n    background-color: yellow;\n} */\n\n.hit-ship {\n    background-color: red;\n}\n\n.hit-missed {\n    background-color: #8aeb52;\n}\n\n.display-wrap > * {\n    margin-left: 45%;\n    color: white;\n}\n\n.tagDisplay {\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.start {\n    font-size: 14px;\n    margin-left: 25%;\n    height: 30px;\n    width: 50%;\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yDAA6D;IAC7D,sBAAsB;IACtB,4BAA4B;AAChC;;AAEA;IACI,eAAe;IACf,MAAM;IACN,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;;IAEI,gBAAgB;IAChB,aAAa;IACb,eAAe;IACf,YAAY;AAChB;;AAEA;;IAEI,0CAA0C;IAC1C,WAAW;IACX,YAAY;AAChB;;AAEA;IACI;AACJ;;AAEA;;GAEG;;AAEH;IACI,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,UAAU;AACd",sourcesContent:["body {\n    background-image: url('../src/assets/images/battleShip.jpeg');\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n.info-container {\n    position: fixed;\n    top: 0;\n    right: 10%;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n.p1-container,\n.p2-container {\n    margin-top: 20px;\n    display: flex;\n    flex-wrap: wrap;\n    width: 500px;\n}\n\n.p1-cell,\n.p2-cell {\n    border: 2px solid rgba(230, 220, 220, 0.6);\n    width: 45px;\n    height: 40px;\n}\n\n.ship {\n    background-color: darkslategray\n}\n\n/* .hidden-ship {\n    background-color: yellow;\n} */\n\n.hit-ship {\n    background-color: red;\n}\n\n.hit-missed {\n    background-color: #8aeb52;\n}\n\n.display-wrap > * {\n    margin-left: 45%;\n    color: white;\n}\n\n.tagDisplay {\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.start {\n    font-size: 14px;\n    margin-left: 25%;\n    height: 30px;\n    width: 50%;\n}"],sourceRoot:""}]);const u=d},312:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},536:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},648:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},596:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var u=n(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=r(h,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var c=o(e,r),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},176:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},808:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},120:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},520:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},936:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},759:(e,t,n)=>{e.exports=n.p+"5a8b4e050673c59671f7.jpeg"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(596),t=n.n(e),o=n(520),r=n.n(o),i=n(176),a=n.n(i),s=n(120),c=n.n(s),l=n(808),d=n.n(l),p=n(936),u=n.n(p),h=n(904),m={};function A(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function f(e){const t=A(0,9),n=A(0,9),o=function(e,t){for(let n=0;n<e.length;n++)if(t[0]===e[n][0]&&e[n][1]===t[1])return n}(e.board,[t,n]);return null===e.objList[o].attacked?[t,n]:f(e)}m.styleTagTransform=u(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=d(),t()(h.c,m),h.c&&h.c.locals&&h.c.locals;const C=e=>({sendAttack:t=>{if(t)e.receiveAttack(t);else{const t=f(e);e.receiveAttack(t)}},activeTurn:!1}),g=(e,t,n)=>{const o=n.objList;return{displayGrid:t=>{for(let n=0;n<100;n++){const o=document.createElement("div"),r=t?"p2-cell":"p1-cell";o.classList.add(r);const i=Math.floor(n/10),a=n%10;o.dataset.row=i,o.dataset.col=a,e.appendChild(o)}},refreshGrid:n=>{const r=n?".p1-cell":".p2-cell";e.querySelectorAll(r).forEach(((e,r)=>{const i=o[r],a=n?"ship":"hidden-ship";null!==i.ship&&null===i.attacked?e.classList.add(a):null!==i.ship&&!0===i.attacked?e.classList.add("hit-ship"):null===i.ship&&!0===i.attacked&&e.classList.add("hit-missed"),!1===t.activeTurn?(e.classList.remove("inActive"),e.classList.add("active")):(e.classList.add("inActive"),e.classList.remove("active"))}))}}};class y{constructor(e){this.length=e,this.hitsCount=0}hits(){return this.hitsCount++}isSunk(){return this.hitsCount>=this.length}}class v{constructor(){this.size=10,this.board=this.createBoard(),this.objList=this.buildObjList(this.board)}receiveAttack(e){const t=[e[0],e[1]],n=this.findIndex(this.board,t);null!=this.objList[n].ship?(this.objList[n].ship.hits(),this.objList[n].attacked=!0):this.objList[n].attacked=!0}createBoard(){const e=[];for(let t=0;t<this.size;t++)for(let n=0;n<this.size;n++)e.push([t,n]);return e}buildObjList(e){const t=[];for(let n=0;n<e.length;n++)t[n]={ship:null,attacked:null};return t}placeShip(e,t,n){const o=new y(t);let[r,i]=e;if("x"===n?i+=t-1:r+=t-1,!(r>=this.size||i>=this.size))for(let t=e[0];t<=r;t++)for(let n=e[1];n<=i;n++){let e=this.findIndex(this.board,[t,n]);this.objList[e].ship=o}}hasShip(e){const t=[e[0],e[1]],n=this.findIndex(this.board,t);return null!=this.objList[n].ship}allShipSunk(){for(let e=0;e<this.objList.length;e++)if(this.objList[e].ship&&!this.objList[e].ship.isSunk())return!1;return!0}findIndex(e,t){for(let n=0;n<e.length;n++)if(t[0]===e[n][0]&&e[n][1]===t[1])return n}placeRandomShip(){const e=[{length:5,quantity:1},{length:4,quantity:1},{length:3,quantity:2},{length:2,quantity:1}];for(const t of e)for(let e=0;e<t.quantity;e++){let e,n,o=!1;for(;!o;)if(e=[Math.floor(Math.random()*this.size),Math.floor(Math.random()*this.size)],n=Math.random()<.5?"x":"y","x"===n?e[1]+t.length-1<this.size&&(o=!0):e[0]+t.length-1<this.size&&(o=!0),o)for(let r=0;r<t.length;r++){let t="x"===n?e[0]:e[0]+r,i="x"===n?e[1]+r:e[1],a=this.findIndex(this.board,[t,i]);if(null!==this.objList[a].ship){o=!1;break}}o&&this.placeShip(e,t.length,n)}}}function b(){const e=document.querySelector(".info-container");e&&e.remove();const t=document.createElement("div");t.classList.add("tagDisplay");const n=document.createElement("div");n.classList.add("container");const o=document.createElement("div");o.classList.add("p1-container");const r=document.createElement("div");r.classList.add("p2-container");const i=document.createElement("div");i.classList.add("display-wrap");const a=document.createElement("h2");a.classList.add("display-msg"),n.appendChild(o),n.appendChild(r),i.appendChild(a);const s=document.body;s.appendChild(t),s.appendChild(n),s.appendChild(i);const c=document.querySelector(".tagDisplay"),l=document.createElement("h2"),d=document.createElement("h2");l.textContent="Player 01",c.appendChild(l),d.textContent="Computer",c.appendChild(d)}document.body.appendChild(function(){const e=document.createElement("div");e.classList.add("info-container");const t=document.createElement("h1");t.textContent="BattleShip",e.appendChild(t);const n=document.createElement("p");n.textContent="Destroy All Enemy's Ship to be Winner",e.appendChild(n);const o=document.createElement("p");o.textContent="Players",e.appendChild(o);const r=document.createElement("ul"),i=document.createElement("li");i.textContent="Player",r.appendChild(i);const a=document.createElement("li");a.textContent="Computer",r.appendChild(a),e.appendChild(r);const s=document.createElement("p");s.textContent="Goal",e.appendChild(s);const c=document.createElement("p");c.textContent="Sink all of your opponents ship",e.appendChild(c);const l=document.createElement("p");l.textContent="SetUp",e.appendChild(l);const d=document.createElement("p");d.textContent="Each Ship will be Randomly Placed",e.appendChild(d);const p=document.createElement("h4");p.textContent="Rules",e.appendChild(p);const u=document.createElement("ul"),h=document.createElement("li");h.textContent="Each have one chance alternatively given",u.appendChild(h);const m=document.createElement("li");m.textContent="If a Ship is hit the grid will be ";const A=document.createElement("span");A.style.color="red",A.textContent="Red Color",m.appendChild(A),u.appendChild(m);const f=document.createElement("li");f.textContent="Missed Means it will be ";const C=document.createElement("span");C.style.color="#8aeb52",C.textContent="Green Color",f.appendChild(C),u.appendChild(f);const g=document.createElement("li");g.textContent="If a Ship is Sunk it will be displayed",u.appendChild(g);const y=document.createElement("li");y.textContent="If all ship sunk the game Ends",u.appendChild(y),e.appendChild(u);const v=document.createElement("button");return v.classList.add("start"),v.textContent="Start",e.appendChild(v),e}());const x=()=>{const e=new v;e.placeRandomShip();const t=new v;t.placeRandomShip();const n=document.querySelector(".p1-container"),o=document.querySelector(".p2-container"),r=C(e),i=C(t),a=g(n,r,e),s=g(o,i,t);a.displayGrid(!1),s.displayGrid(!0),a.refreshGrid(!0),s.refreshGrid(!1),document.querySelectorAll(".p2-cell").forEach((n=>{n.addEventListener("click",(()=>{const o=parseInt(n.dataset.row),l=parseInt(n.dataset.col),d=document.querySelector(".display-msg");if(t.receiveAttack([o,l]),s.refreshGrid(!1),t.allShipSunk())return d.textContent="Player Wins!",setTimeout(p,1e3),void setTimeout(c,2e3);function p(){d.textContent="New Game...!"}setTimeout((()=>{if(i.activeTurn=!0,r.sendAttack(),a.refreshGrid(!0),e.allShipSunk())return d.textContent="Computer Wins",setTimeout(p,1e3),void setTimeout(c,2e3);i.activeTurn=!1}),1e3)}))}));const c=()=>{document.querySelector(".container").remove(),document.querySelector(".tagDisplay").remove(),document.querySelector(".display-wrap").remove(),b(),x()}};document.querySelector(".start").addEventListener("click",(()=>{b(),x()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,